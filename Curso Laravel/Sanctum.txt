Laravel Sanctum es un sistema de atunticación ligero para SPAs (Single Page Applications), aplicaciones móviles y para APIS simples basadas en tokens. 
Sanctum permite a cada usuario de la aplicación generar múltiples tokens de API para su cuenta. A esos tokens se les pueden asignar 'abilities', los cuales
especifican las acciones que los tokens tienen permitido hacer.

Sanctum fue creado para resolver dos problematicas, los tokens de API y la autenticación de SPAs.
	-Para los tokens de API, Sanctum ofrece un paquete simple el cual puedes usar para asignar tokens a tus usuarios sin la complicación de OAuth (otro sistema
	de tokens de APIs). 
	Los tokens de Sanctum tienen, por lo general, una fecha de expiración de varios años, pero estos tokens pueden ser revocados manualmente por el usuario.
	Sanctum ofrece esta funcionalidad almacenando los tokens de API en una misma tabla de base de datos y autenticando peticiones HTTP entrantes por medio de el
	header de 'Authorization', el cual debería contener un token de API válido.

	-Para la autenticación de SPAs, Sanctum ofrece una forma simple de ententicar SPAs que necesitan comunicarse con una API hecha con Laravel. Esos SPAs
	pueden existir en el mismo repositorio que la aplicación Laravel o también pueden estar en un repositorio completamente distinto, como SPAs creados
	usando Vue CLI o una aplicación Next.js
	Para esta característica, Sanctum no usa tokens de ningún tipo, en vez de eso, Sanctum usa los serviciones de autenticación de sesión basados en cookies,
	el cual ya viene integrado en Laravel. Típicamente, Sanctum utiliza el 'web authentication guard' para lograr esto. Esto provee el beneficio de la
	protección CSRF, autenticación de sesión, así como también protege contra la filtraciójn de credenciales mediante XSS.
	Sanctum solo intentará autenticar usando cookies cuando la petición entrante se origina desde el frontend de tu propia SPA. Cuando Sanctum examina una
	petición HTTP entrante, primero revisará por una cookie de autenticación y, si no hay ninguna presente, Sanctum entonces examinará el header de 'Authorization'
	en busca de un token de API válido.

Sanctum permite hacer uso de cualquiera de estas dos funcionalidades, sin necesidad de usar las dos a la vez, es decir, no se requiere usar ambas, se pueden usar
de forma individual.

##################### Instalar Sanctum ###########################
Para instalar Sanctum en tu proyecto, se hace uso del siguiente comando:
	composer require laravel/sanctum

El siguiente paso es publicar los archivos de configuración de migración de Sanctum, usando el comando de Artisan 'vendor:publish'. El archivo de configuración de 
Sanctum será colocado en la carpeta de configuración de tu proyecto:
	php artisan vendor:publish --provider="Laravel\Sanctum\SanctumServiceProvider"

Finalmente, se deben ejecutar las migraciones de bases de datos. Sanctum creará una tabla de base de datos en la cual almacenará los tokens de API:
	php artisan migrate

Si se quiere usar Sanctum para autenticar un SPA, se debe agregar el middleware de Sanctum al grupo de middleware de tu API en el archivo 'app/Http/Kernel.php' de
tu proyecto:
	'api' => [
		\Laravel\Sanctum\Http\Middleware\EnsureFrontendRequestsAreStateful::class,
		'throttle:api',
		\Illuminate\Routing\Middleware\SubstituteBindings::class,
	],


Si se tienen problemas al autenticar con una aplicación deesde un SPA que se ejecuta en un subdominio separado, lo más probable es que sea un problema de configuración
de tus CORS (Cross-Origin Resource Sharing), o los ajustes de cookies de sesión.
Debes asegurarte que la configuración de CORS de tu aplicación está retornando el header 'Access-Control-Allow-Credentials' con un valor true. Esto se puede lograr
modificando la opción 'supports_credentials', la cual se encuentra en el archivo de configuración 'config/cors.php' a true.
	<?php
	return [
	    /*
	    |--------------------------------------------------------------------------
	    | Cross-Origin Resource Sharing (CORS) Configuration
	    |--------------------------------------------------------------------------

	    .
	    .
	    .

	    */

	    .
	    .
	    .

	    'supports_credentials' => true,
	];

En adición, se debe habilitar la opción 'withCredentials' en la instancia global de Axios en tu aplicación. Típicamente, esto debe ser realizado en el archivo
'resources/js/bootstrap.js'. Si no usas Axios para hacer peticiones HTTP desde tu frontend, deberías realizar la configuración equivalente en tu propio
cliente HTTP:
	axios.defaults.withCredentials = true;


Finalmente, debes asegurante que la configuración de dominio de cookies de sesión de tu aplicación soporta cualquier subdominio de tu dominio raíz. Puedes lograr
esto usando prefijos en el dominio, colocando un punto (.) antes de este, en el archivo de configuración de tu aplicación 'config/session.php':
	'domain' => '.domain.com'